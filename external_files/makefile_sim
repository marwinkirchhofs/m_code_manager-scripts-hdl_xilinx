#!/usr/bin/env bash

ifndef _MAKE_SIM_XILINX_
_MAKE_SIM_XILINX_ := 1

# save the name of this makefile (in case it ever changes) - NEEDS TO BE DONE 
# BEFORE INCLUDING ANYTHING BECAUSE OF MAKEFILE_LIST!!! The name is necessary 
# when nesting make processes within this file, because standard that would go 
# to sim/makefile
DIR_MAKE_SIM_XILINX		:= $(abspath $(dir $(lastword ${MAKEFILE_LIST})))

FILE_MAKE_XIL_SIM		:= $(lastword ${MAKEFILE_LIST})
MAKE_XIL_SIM			:= make -f ${FILE_MAKE_XIL_SIM}

include ${DIR_MAKE_SIM_XILINX}/../var.mk
include ${DIR_MAKE_SIM_XILINX}/../scripts_xil/var.mk

##############################
# PREPARE
##############################

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# TODO: The sim generation scripts has the big problem that it fails if the ip 
# sources are vhdl and not verilog... The reason: When linking to the libs in 
# the vivado-generated IP export directory, I currently rename the libs, in the 
# sense that I prepend every lib with the unique IP name that I gave the IP.  
# I think the reason were some ambiguity problems, where 2 IPs would use the 
# same libs, and then I don't remember anymore what was the problem with just 
# linking to one of the two IP exports, since it's only a lib anyways. I mean, 
# sounds like it should work, but something tells me there is a reason I added 
# the suffix. The actual problem is that vhdl defines the library names in the 
# source files, meaning you basically can't use different library names (unless 
# you sed the source files...)
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# TODO: do whatever makes sense	if the simulator is anything else than modelsim 
# or questa
.PHONY: ${SIMULATOR}_prepare
${SIMULATOR}_prepare:
	source ${SCRIPT_CREATE_SIM_SCRIPTS}		\
			${SIMULATOR}						\
			${SCRIPT_RUN_SIM}					\
			${SCRIPT_PREPARE_SIM}				\
			${SCRIPT_OPT_SIM}					\
			tb_${SIM_TOP}						\
			${DIR_XIPS_SIM_OUT}					\
			${DIR_XIL_IP_PRECOMPILE}			\
			"${SIM_ARGS}"
	@echo "Simulation run script ${SCRIPT_RUN_SIM} successfully created"

##############################
# COMPILE
##############################

.PHONY: ${SIMULATOR}_compile
${SIMULATOR}_compile: ${SIMULATOR}_xip_export_compile

# .PHONY: ${SIMULATOR}_compile
# ${SIMULATOR}_compile:
# 	@echo $(abspath $(dir questa/xip_sim_export/xip_bram_axi_test/questa/questa_lib))

# yes, it is ugly and probably bad practice to invoke nested makes, because 
# effectively here ${DIR_XIPS_SIM_OUT} and modelsim_xip_compile are both 
# prerequisites. The two problems: 1. the order is absolutely crucial, because 
# compile doesn't make sense before exporting. So far no problem, but 2. before 
# exporting, ${LIST_XIPS_SIM} is empty, which is basically the list of 
# subtargets for modelsim_xip_compile. Therefore you don't know what exactly 
# modelsim_xip_compile consists of before the export, meaning you would have to 
# define the export as prerequisite to targets which you can't express the name 
# of yet (with or without variables), and I don't know of another way to make 
# that work.
.PHONY: ${SIMULATOR}_xip_export_compile
${SIMULATOR}_xip_export_compile:	${DIR_XIPS_SIM_OUT}
	${MAKE_XIL_SIM} ${SIMULATOR}_xip_compile

# main entry target to run compilation for all SIMULATION-EXPORTED xilinx IPs
${SIMULATOR}_xip_compile:	$(addsuffix _compile,$(addprefix ${SIMULATOR}_,${LIST_XIPS_SIM}))

# (doesn't look like that, but in practice the pattern rule evaluates into the 
# prerequisites of modelsim_xip_compile)
# bash nop inserted in order for make to detect the rule. Empty rule gets not 
# detected, maybe because of something in the backend of how pattern rules are 
# processed, I might be in the mood to check that out another day.
${SIMULATOR}_xip_%_compile:		${DIR_XIPS_SIM_OUT}/xip_%/${SIMULATOR}/${SIMULATOR}_lib
	@:

# depending on the modelsim_lib directory should work, because this directory 
# only needs to be updated if any of the IP sources changed (the IP RTL gets 
# included during compilation). But if that is the case, the entire parent 
# directory ${DIR_XIPS_SIM_OUT} gets recreated, meaning there is no modelsim_lib 
# directory after all, and this target should get executed. In other words: 
# whenever */modelsim_lib exists, there should be nothing to do.
#
# indicates that "dummy" post-compile simulation was unsuccessful by creating 
# the file "simulation_failed" in the IPs directory.
# Reason: It is possible for an IP to compile correctly, but then fail in 
# simulation because for instance there are no licenses available for 
# a simulation feature in the IP. In that case, the entire target would fail if 
# there wasn't an "catch block" ('|| touch simulation_failed') in the rule, 
# causing make to abort and all the remaining IPs to not be compiled. But it is 
# possible that the failing IP is not used in simulation at all, so the fail 
# doesn't matter. Therefore the important thing is that compilation of the other 
# IPs is not affected. Later on, when generating ${SCRIPT_RUN_SIM}, you can 
# check the "simulation_failed" file before including the libs of that 
# particular IP, such that you don't include potentially breaking stuff that you 
# can't use in simulation anyway.
${DIR_XIPS_SIM_OUT}/xip_%/${SIMULATOR}/${SIMULATOR}_lib:
	cd $(dir $@) && ( [[ -s xip_$*.sh ]] && source xip_$*.sh ) || touch simulation_failed
	[[ -d $@/msim/xil_defaultlib/xip_$*_opt ]] && rm -rd $@/msim/xil_defaultlib/xip_$*_opt || :
	[[ -z "$(find $(abspath $(dir $@)) -name '*.mem')" ]] || 	\
		cp $(abspath $(dir $@))/*.mem ${SIMULATOR}

.PHONY: xip_export_sim
xip_export_sim:	${DIR_XIPS_SIM_OUT}

# TODO: before adding the mkdir, this fails if not using any xips, because then 
# vivado doesn't create the directory, you're touching something that doesn't 
# exist, and you end up with an empty file for what should have been 
# a directory. Then later you ls on that, and instead of the desired empty 
# output you get the file path back and you're screwed. -> make sure this fix 
# still works when there are xips, like that vivado doesn't complain "oh if the 
# directory already exists, I'm not doing anything over here"
${DIR_XIPS_SIM_OUT}:	${LIST_XIPS_XCI}
	@[[ -d "${DIR_XIPS_SIM_OUT}" ]] && rm -rd ${DIR_XIPS_SIM_OUT} || :
	@mkdir ${DIR_XIPS_SIM_OUT}
	${XIL_TOOL} -mode batch -source ${SCRIPT_GENERATE_XIPS} ${XIL_PRJ} \
					-tclargs export_sim ${SIMULATOR} ${DIR_XIPS_SIM_OUT}
	@touch $@

endif
